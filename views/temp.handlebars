<!-- views/index.handlebars -->
<html lang="en">
<head>
  <meta charset="utf-8"/>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Orbitron:400,600&display=swap">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Aubrey&display=swap" rel="stylesheet">

  <style>
    /* Global Reset */
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    /* Dark background, edgy font, bright accent color */
    body {
      font-family: 'Orbitron', sans-serif; /* Or "Exo 2", "Share Tech Mono", etc. */
      background-color: #1a1a1a; /* dark grey/black */
      color: #e0e0e0;
      padding: 1rem;
    }

    /* Main Title */
    h1 {
      color: #f228bb; /* neon magenta/purple accent */
      font-weight: 600;
      font-size: 2rem;
      text-transform: uppercase;
      margin-bottom: 0.5rem;
      letter-spacing: 1px;
    }

    /* Secondary Titles */
    h2 {
      color: #c71fe8; /* a slightly different neon purple hue */
      font-weight: 600;
      font-size: 1.3rem;
      text-transform: uppercase;
      margin-bottom: 0.75rem;
      letter-spacing: 1px;
    }

    /* Paragraph styling */
    p {
      line-height: 1.5;
      margin-bottom: 1rem;
    }

    /* Panels for character creation and chat - dark, with neon border and subtle glow */
    #charCreationContainer,
    #chatContainer {
      background-color: #2c2c2c;
      border: 1px solid #3e3e3e;
      border-radius: 6px;
      box-shadow: 0 0 10px rgba(240, 36, 186, 0.2); /* neon-ish glow */
      padding: 1.5rem;
      max-width: 600px;
      margin-bottom: 2rem;
    }

    /* The conversation box with a slightly lighter background, 
       neon border, and scrolling area */
    #conversation {
      background-color: #262626;
      border: 1px solid #3e3e3e;
      border-radius: 6px;
      padding: 1rem;
      max-height: 300px;
      overflow-y: auto;
      margin-bottom: 1rem;
    }

    /* Labels for forms - neon accent and uppercase */
    label {
      display: block;
      margin: 0.5rem 0 0.25rem;
      font-weight: 600;
      text-transform: uppercase;
      color: #c71fe8;
    }

    /* Inputs, selects, textarea - dark background, subtle border, neon glow on focus */
    input[type="text"],
    select,
    textarea {
      width: 100%;
      padding: 0.5rem;
      font-family: 'Orbitron', sans-serif;
      font-size: 0.95rem;
      background-color: #333;
      color: #f0f0f0;
      border: 1px solid #3e3e3e;
      border-radius: 4px;
      margin-bottom: 1rem;
      outline: none;
    }
    input[type="text"]:focus,
    select:focus,
    textarea:focus {
      border-color: #f228bb;
      box-shadow: 0 0 5px rgba(242, 40, 187, 0.5);
    }

    /* Buttons: edgy neon gradient, glow on hover */
    button {
      background: linear-gradient(45deg, #f228bb, #c71fe8);
      color: #fff;
      border: none;
      border-radius: 4px;
      font-family: 'Orbitron', sans-serif;
      font-size: 1rem;
      font-weight: 600;
      padding: 0.5rem 1rem;
      cursor: pointer;
      transition: box-shadow 0.3s ease;
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    button:hover {
      box-shadow: 0 0 8px rgba(242, 40, 187, 0.8), 0 0 10px rgba(199, 31, 232, 0.6);
    }

    /* Chat message alignment & styling */
    .system-message {
      font-size: 0.85rem;
      font-style: italic;
      color: #888;
      margin-bottom: 0.5rem;
    }
    .user-message {
      font-size: 14pt;
      font-family: "Aubrey", system-ui;
      text-align: right;
      margin-bottom: 0.5rem;
      font-weight: 400;
      color: #efefef;
    }
    .assistant-message {
      font-size: 14pt;
      font-family: "Aubrey", system-ui;
      background-color: #333;
      color: #efefef;
      padding: 0.5rem;
      margin-bottom: 0.5rem;
      border-radius: 4px;
      position: relative;
      box-shadow: inset 0 0 3px rgba(0,0,0,0.2);
    }

    /* Image styling in chat: slight border, neon highlight */
    #conversation img {
      max-width: 100%;
      border: 2px solid #f228bb;
      border-radius: 6px;
      margin-top: 0.5rem;
      box-shadow: 0 0 10px rgba(242, 40, 187, 0.3);
    }
  </style>
  <title>{{title}}</title>
</head>
<body>
  <h1>Welcome to a New Adventure</h1>

  <p>To interact with the story type out your actions in the chatbar</p>
  <p>To see environments/characters simply type "show me" into the chatbar</p>

  <!-- ======================= CHARACTER CREATION ======================= -->
  <div id="charCreationContainer" style="border:1px solid #ccc; padding:1rem; width:600px;">
    <h2>Create Your Character</h2>
    <form id="charForm">
      <label for="charName">Character Name:</label><br/>
      <input type="text" id="charName" name="charName" required/><br/><br/>

      <label for="charRace">Race:</label><br/>
      <select id="charRace" name="charRace" required>
        <option value="">--Select a Race--</option>
        <option value="Human">Human</option>
        <option value="Elf">Elf</option>
        <option value="Dwarf">Dwarf</option>
        <option value="Orc">Orc</option>
        <option value="Halfling">Halfling</option>
        <option value="Tiefling">Tiefling</option>
      </select><br/><br/>

      <label for="charClass">Class:</label><br/>
      <select id="charClass" name="charClass" required>
        <option value="">--Select a Class--</option>
        <option value="Fighter">Fighter</option>
        <option value="Rogue">Rogue</option>
        <option value="Wizard">Wizard</option>
        <option value="Cleric">Cleric</option>
        <option value="Ranger">Ranger</option>
        <option value="Bard">Bard</option>
      </select><br/><br/>

      <label for="adventureType">Adventure Type:</label><br/>
      <select id="adventureType" name="adventureType">
        <option value="Fantasy">Fantasy</option>
        <option value="Sci-Fi">Sci-Fi</option>
        <option value="Mystery">Mystery</option>
        <option value="Horror">Horror</option>
      </select><br/><br/>

      <button type="submit">Start Adventure</button>
    </form>
  </div>

  <!-- ======================= CHAT UI (initially hidden) ======================= -->
  <div id="chatContainer" style="display:none; margin-top:2rem; width:600px;">
    <h2>Adventure Chat</h2>

    <!-- Conversation window -->
    <div id="conversation" style="border: 1px solid #ccc; padding: 1rem; max-height: 300px; overflow-y: auto;">
      <!-- We'll dynamically append messages here -->
    </div>

    <!-- Chat input form -->
    <form id="chatForm" style="margin-top: 1rem;">
      <label for="message">Action/Speech:</label><br/>
      <input type="text" id="message" name="message" style="width: 80%;" />
      <button type="submit">Send</button>
    </form>
  </div>

  <!-- ======================= IMAGE GENERATION ======================= -->
  <!--<h2>Generate an Image</h2>
  <form id="imageForm">
    <label for="imagePrompt">Prompt for Image:</label><br/>
    <textarea id="imagePrompt" rows="3" cols="50"></textarea><br/>

    <label for="imageCount">Number of images:</label>
    <input type="number" id="imageCount" value="1" min="1" max="5" /><br/>

    <label for="imageSize">Image size:</label>
    <select id="imageSize">
      <option value="256x256">256x256</option>
      <option value="512x512" selected>512x512</option>
      <option value="1024x1024">1024x1024</option>
    </select><br/>

    <button type="submit">Generate Image</button>
  </form>

  <h2>Generated Images:</h2>
  <div id="imageResult"></div>-->

  <script>
    /*********************************************************
     *  1) Character Creation & Setup
     *********************************************************/
    let messages = [];

    document.getElementById('charForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const charName = document.getElementById('charName').value.trim();
      const charRace = document.getElementById('charRace').value.trim();
      const charClass = document.getElementById('charClass').value.trim();
      const adventureType = document.getElementById('adventureType').value;

      // Build a system message describing the scenario:
      const systemContent = `
        You are a creative and helpful AI Dungeon Master.
        The player has created a character:
        - Name: ${charName}
        - Race: ${charRace}
        - Class: ${charClass}
        They want a ${adventureType} style adventure.
        Provide a brief introduction and be ready to guide them through the story.
      `;

      // Reset the messages array
      messages = [
        { role: "system", content: systemContent }
      ];

      // Optionally: Immediately fetch an intro from the AI
      const intro = await getAIResponse(messages);
      if (intro) {
        // Push the AI's response as an assistant message
        messages.push({ role: "assistant", content: intro });
      }

      // Switch the display to the chat
      document.getElementById('charCreationContainer').style.display = 'none';
      document.getElementById('chatContainer').style.display = 'block';

      // Render the conversation so far
      renderConversation();
    });


    /*********************************************************
     *  2) Render Conversation
     *********************************************************/
     function renderConversation() {
      const convoDiv = document.getElementById('conversation');
      convoDiv.innerHTML = '';

      messages.forEach((msg) => {
        const msgDiv = document.createElement('div');

        if (msg.role === 'system') {
          msgDiv.classList.add('system-message');
          msgDiv.innerHTML = `System: ${msg.content}`;
        } else if (msg.role === 'user') {
          msgDiv.classList.add('user-message');
          msgDiv.innerHTML = `<strong>You:</strong> ${msg.content}`;
        } else if (msg.role === 'assistant') {
          msgDiv.classList.add('assistant-message');
          if (msg.content.includes('<img')) {
            msgDiv.innerHTML = `<strong>AI DM:</strong><br>${msg.content}`;
          } else {
            msgDiv.innerHTML = `<strong>AI DM:</strong> ${msg.content}`;
          }
        }

        convoDiv.appendChild(msgDiv);
      });

      convoDiv.scrollTop = convoDiv.scrollHeight;
    }

    //function renderConversation() {
    //  const convoDiv = document.getElementById('conversation');
    //  convoDiv.innerHTML = '';
//
    //  messages.forEach((msg) => {
    //    const msgDiv = document.createElement('div');
    //    msgDiv.style.margin = '0.5rem 0';
//
    //    if (msg.role === 'system') {
    //      // You can hide or style the system message differently
    //      msgDiv.innerHTML = `<em>System: ${msg.content}</em>`;
    //      msgDiv.style.fontSize = '0.9em';
    //      msgDiv.style.color = '#888';
    //    }
    //    else if (msg.role === 'user') {
    //      msgDiv.innerHTML = `<strong>You:</strong> ${msg.content}`;
    //      msgDiv.style.textAlign = 'right';
    //    }
    //    else if (msg.role === 'assistant') {
    //      // If the assistant message has <img> in it, let it render as HTML
    //      if (msg.content.includes('<img')) {
    //        msgDiv.innerHTML = `<strong>AI DM:</strong><br>${msg.content}`;
    //      } else {
    //        msgDiv.innerHTML = `<strong>AI DM:</strong> ${msg.content}`;
    //      }
    //      msgDiv.style.backgroundColor = '#f8f8f8';
    //      msgDiv.style.padding = '0.5rem';
    //    }
//
    //    convoDiv.appendChild(msgDiv);
    //  });
//
    //  // Auto-scroll to bottom
    //  convoDiv.scrollTop = convoDiv.scrollHeight;
    //}


    /*********************************************************
     *  3) Chat Interaction
     *********************************************************/
    document.getElementById('chatForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const userInput = document.getElementById('message');
      const content = userInput.value.trim();
      if (!content) return;

      // Add user's message to conversation
      messages.push({ role: "user", content });
      userInput.value = '';
      renderConversation();

      // Special check if user typed "show me"
      if (content.toLowerCase() === 'show me') {
        // 1) Grab the last AI DM message (the last 'assistant' role)
        const lastAssistantMsg = messages
          .filter((m) => m.role === 'assistant')
          .pop();
        if (!lastAssistantMsg) {
          // No AI message yet, do nothing or respond with an error
          messages.push({ role: 'assistant', content: "There's nothing to show yet!" });
          renderConversation();
          return;
        }

        // 2) Summarize it into a short image prompt using the LLM
        // We'll ask the LLM to "convert the last DM message into a short image prompt"
        const summarizeRequest = {
          role: 'user',
          content: `Please convert the following scene description into a concise image prompt for an art generator: "${lastAssistantMsg.content}"`
        };

        // Add it to messages so the LLM sees the request
        messages.push(summarizeRequest);
        renderConversation();

        // Request a summary from the LLM
        const summary = await getAIResponse(messages);
        messages.push({ role: 'assistant', content: summary });
        renderConversation();

        // 3) Immediately indicate "Generating image..." in chat
        const generatingMsg = { role: 'assistant', content: 'Generating image...' };
        messages.push(generatingMsg);
        renderConversation();

        //clean summary so that it is only a prompt 
        const match = summary.match(/"([^"]+)"/);
        let promptOnly;

        if (match && match[1]) {
          // match[1] is the text inside the first pair of quotation marks
          promptOnly = match[1];
        } else {
          // If no quotes were found, just fallback to the entire summary or handle the error.
          promptOnly = summary;
        }

        // 4) Call the /image endpoint with the summarized prompt
        try {
          const response = await fetch('/image', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt: promptOnly, n: 1, size: '512x512' }),
          });

          const data = await response.json();

          // Remove the "Generating image..." message
          const genIndex = messages.indexOf(generatingMsg);
          if (genIndex !== -1) {
            messages.splice(genIndex, 1);
          }

          if (data.error) {
            messages.push({ role: 'assistant', content: `Image generation error: ${data.error}` });
          }
          else if (data.images && data.images.length > 0) {
            // Insert the image as HTML in a new assistant message
            const imageUrl = data.images[0].url;
            const imgTag = `<img src="${imageUrl}" alt="Generated Image" style="max-width:100%;" />`;
            messages.push({ role: 'assistant', content: imgTag });
          }
        } catch (err) {
          console.error('Image generation error:', err);
          // Remove the "Generating image..." message
          const genIdx = messages.indexOf(generatingMsg);
          if (genIdx !== -1) {
            messages.splice(genIdx, 1);
          }
          messages.push({ role: 'assistant', content: 'Failed to generate image.' });
        }
        renderConversation();
        return; // Skip the normal AI reply below
      }

      // If NOT "show me," get normal AI response
      const aiReply = await getAIResponse(messages);
      if (aiReply) {
        messages.push({ role: "assistant", content: aiReply });
      }
      renderConversation();
    });

    // Helper to call /chat
    async function getAIResponse(conversation) {
      try {
        const response = await fetch('/chat', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          // We send the entire conversation so far
          body: JSON.stringify({ messages: conversation }),
        });
        const data = await response.json();
        return data.assistantMessage; // Could be undefined if error
      } catch (err) {
        console.error('Error while fetching AI response:', err);
        return 'Oops, something went wrong.';
      }
    }


    /*********************************************************
     *  4) Image Generation (unchanged)
     *********************************************************/
    document.getElementById('imageForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const prompt = document.getElementById('imagePrompt').value;
      const n = parseInt(document.getElementById('imageCount').value, 10);
      const size = document.getElementById('imageSize').value;

      const response = await fetch('/image', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt, n, size }),
      });

      const data = await response.json();
      const imageContainer = document.getElementById('imageResult');
      imageContainer.innerHTML = '';

      if (data.error) {
        imageContainer.innerText = data.error;
        return;
      }

      if (data.images && data.images.length > 0) {
        data.images.forEach((imgObj) => {
          const img = document.createElement('img');
          img.src = imgObj.url;
          img.style.display = 'block';
          img.style.marginBottom = '1rem';
          imageContainer.appendChild(img);
        });
      }
    });
  </script>
</body>
</html>
